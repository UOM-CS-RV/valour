grammar mt.edu.um.cs.rv.Valour with org.eclipse.xtext.xbase.Xbase

import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/xtext/xbase/Xtype"

generate valour "http://www.edu.mt/um/cs/rv/valour"

Model:
	(imports=XImportSection)?
	body=ValourBody;

ValourBody:
	(declarations=Declarations)? //optional declarations block
	rules=Rules
;

Declarations:
	'declarations' '{'
	(declarations+=Declaration)*
	'}';

Declaration:
	category=Category
	| event=Event
	| condition=Condition
	| action=Action;

Category:
	'category' name=ID 'indexed' 'by' keyType=JvmTypeReference;

Event:
	'event' name=ID '('eventFormalParameters=FormalParameters')' '=' '{' eventBody=EventBody '}';

FormalParameters:
	(parameters+=FullJvmFormalParameter (',' parameters+=FullJvmFormalParameter)*)?;

ActualParameters:
	(parameters+=XExpression (',' parameters+=XExpression)*)?;

EventBody:
	trigger=SimpleTrigger (=>additionalTrigger=AdditionalTrigger)?
	(when=WhenClause)?
	(where=WhereClause)?
	(categorisation=CategorisationClause)?;

SimpleTrigger:
	ControlFlowTrigger |
	EventTrigger |
	MonitorTrigger
;

ControlFlowTrigger:
	'system' 'controlflow' 'trigger' aop=AopExpression;

//TODO change aop
AopExpression:
	expression=STRING;

EventTrigger:
	'event' 'trigger' onEvent=[Event] '(' params=FormalParameters ')';

MonitorTrigger:
	'monitor' 'trigger' name=ID '(' params=FormalParameters ')';


AdditionalTrigger:
	(whereClause=WhereClause)? (=>'||') trigger=SimpleTrigger (=>additionalTrigger=AdditionalTrigger)?;


//TODO cross reference event parameters - http://stackoverflow.com/questions/15511669/validate-number-of-function-parameters-in-xtext
WhereClause:
	'where' (whereId=ID '=' whereExpression=ValueExpression)*
;

ValueExpression:
	simple=SimpleValueExpression | complex=ComplexValueExpression;

//TODO - review this and make more restrictive?  Should always return a result (of a given type)
SimpleValueExpression:
	'{{'
	(expressions+=ValueBlockStatement ';'?)*
	'}}';

//TODO - review this and make more restrictive?  Should always return a result (of a given type)
ComplexValueExpression:
	'{'
	(expressions+=ValueBlockStatement ';'?)*
	'}';

ValueBlockStatement returns xbase::XExpression:
	XExpressionOrVarDeclaration;

WhenClause:
	'when' condition=ConditionExpression;

ConditionExpression:
	ConditionRefInvocation|ConditionBlock;

ConditionRefInvocation:
	ref=ConditionRef'('params=FormalParameters')';

ConditionRef hidden():
	'#'ref=[Condition];

ConditionBlock:
	SimpleCondition | ComplexCondition;

//TODO - review this and make more restrictive?  Should always have a boolean result
SimpleCondition:
	'{{'
	(expressions+=ConditionBlockStatement ';'?)*
	'}}';

//TODO - review this and make more restrictive?  Should always have a boolean result
ComplexCondition:
	'{'
	(expressions+=ConditionBlockStatement ';'?)*
	'}';

ConditionBlockStatement returns xbase::XExpression:
	ConditionRefInvocation | XExpressionOrVarDeclaration;

//TODO check if its possible to bind the type of the ValueExpression with the type of the category.
//Probably in a similar way as described here - http://stackoverflow.com/questions/15511669/validate-number-of-function-parameters-in-xtext
CategorisationClause:
	'belonging' 'to' category=[Category] 'with' 'index' categoryExpression=ValueExpression;

Condition:
	'condition' name=ID '('conditionFormalParameters=FormalParameters')' '=' conditionExpression=ConditionExpression;

Action:
	'action' name=ID '('actionFormalParameters=FormalParameters')' '=' action=ActionBlock;

RuleAction:
	actionBlock=ActionBlock |
	actionRefInvocation=ActionRefInvocation |
	actionMonitorTriggerFire=MonitorTriggerFire;

//TODO, should allow reference to other actions and monitor trigger
ActionBlock :
	'{'
		(expressions+=ActionBlockStatement ';'?)*
	'}';

ActionBlockStatement returns xbase::XExpression:
	ActionRefInvocation | XExpressionOrVarDeclaration;
//TODO look at this to restrict the syntax here to just Java statements - https://typefox.io/tutorial-how-to-embed-java-in-an-xtext-dsl

ActionRefInvocation:
	actionRef=ActionRef '('actionActualParameters=ActualParameters')';
//ActionRef is split from ActionRefInvocation in order to enfore no spacing between the # and the action name
ActionRef hidden():
	'#'actionRefId=[Action];

//TODO make monitor trigger reference instance of MonitorTrigger i.e. monitorTrigger=[MonitorTrigger]
// currently the problem is that monitor triggers are scoped within an event, but #generate trigger does not allow
// fully qualified references e.g. event a() = monitor trigger b(), b() needs to be referenced as a.b() but monitorTrigger=[MonitorTrigger]
// does not currently allow it.
MonitorTriggerFire:
	'#generate' 'trigger' monitorTrigger=ID '('monitorTriggerActualParameters=ActualParameters')';


Rules:
	(rules+=Rule)*;

Rule:
	basicRule=BasicRule
	| stateBlock=StateBlock
	| forEach=ForEach
	| parForEach=ParForEach
;

BasicRule:
	event=EventRef ('|' condition=ConditionExpression )? '->' ruleAction=RuleAction
;

//TODO bind parameters with declaration - http://stackoverflow.com/questions/15511669/validate-number-of-function-parameters-in-xtext
EventRef:
	eventRefId=[Event] '('eventActualParameters=ActualParameters')'
;

StateBlock:
	'state' '{' (stateDec+=StateDeclaration)* '}' 'in' '{' valourBody=ValourBody '}';

//TODO - can we use the var/var declation in xtext ? - https://eclipse.org/xtend/documentation/203_xtend_expressions.html
StateDeclaration :
//	dec=XVariableDeclaration
	type=JvmTypeReference name=ValidID ('=' right=XExpression)?
;


ForEach:
	'replicate'
	'{'
	(stateDec+=StateDeclaration)*
	'}'
	'foreach' category=[Category] categoryLabel=ID
	'{'
	valourBody=ValourBody
	'}';

ParForEach:
	'replicate' 'in' 'parallel'
	'{'
	(stateDec+=StateDeclaration)*
	'}'
	'foreach' category=[Category] categoryLabel=ID
	'{'
	valourBody=ValourBody
	'}';