/*
 * generated by Xtext 2.9.2
 */
package mt.edu.um.cs.rv.validation

import org.eclipse.xtext.validation.Check
import mt.edu.um.cs.rv.valour.Event
import mt.edu.um.cs.rv.valour.EventRef
import mt.edu.um.cs.rv.valour.ValourPackage

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class ValourValidator extends AbstractValourValidator {

//  public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					ValourPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}


	@Check
	def checkParameterCount(EventRef eventRef) {

		val e = eventRef.eCrossReferences.get(0) as Event
		
		var actualParameterCount = 0
		if (eventRef.eventActualParameters != null && !eventRef.eventActualParameters.parameters.isNullOrEmpty){
			actualParameterCount = eventRef.eventActualParameters.parameters.size
		}
		
		var formalParameterCount = 0
		if (e.eventFormalParameters != null && !e.eventFormalParameters.parameters.isNullOrEmpty){
			formalParameterCount = e.eventFormalParameters.parameters.size
		}
	 
		if (actualParameterCount != formalParameterCount)
		{
			var msg = '''Bad parameter count for event «e.name»: Expected «formalParameterCount» but found «actualParameterCount»'''
			error(msg, ValourPackage.Literals.EVENT_REF__EVENT_REF_ID);
		}

	}

}
